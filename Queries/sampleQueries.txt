-- WHERE clauses example

select * from employees where age = 25; -- where clause can be used whenever we need something specific from tables & its case insensitive
select last_name, id, age from employees where last_name in ( 'Ram','shyam'); -- passing multiple keys to match from the list
select id, age, last_name from employees where age = 21;-- where clause can be used whenever we need something specific from tables & its case insensitive

-- ALIAS Names

SELECT cat_id AS id, name FROM cats;

SELECT name AS 'cat name', breed AS 'kitty breed' FROM cats;

-- Sting functions
	-- CONCAT
select concat(author_fname,' ',author_lname) as 'full name' from books; -- concats 2 strings/values from different columns
select author_fname as fname, author_lname as lname, concat(author_fname,',',author_lname) as 'fullname' from books;
select concat_ws('-',author_fname,author_lname,title,released_year) from books; -- concat with seperator, provide the seperator at the beginning and it gets concatinated for all the column values.

	-- SUBSTRING - in mysql, indexes start from 1. where as 0 for other languages.
select substring(author_fname, 1,5) as one, substring(author_lname, 1, 6) as two from books; -- selecting string between specific indexes.
select author_fname as fname ,substring(author_fname,-3) from books; -- selecting indexes from reverse and starts from -1

	-- REPLACE ('string', 'select what to replace from string', 'with what the string to be replaced')
 SELECT REPLACE('Hello World', 'l', '7');
 select age, replace(first_name, 'a', '143') from people; -- here i have tried to replace all 'a' in 'first_name' with 143

	-- REVERSE
 SELECT REVERSE('Hello World');
 select reverse(last_name) from employees;
 select concat(last_name, ' ' , reverse(last_name)) as reverse from employees;

	-- CHAR_LENGTH
select last_name, character_length(last_name) from employees;
select last_name,
	concat(
		last_name,' is ', character_length(last_name), ' long'
	) from employees;

    -- UPPER and LOWER CASE
select upper(last_name) as uppername from employees;
select
	concat(
	'My name is ', ' ', upper(last_name)
	) as uppername from employees;

	-- Multiple string concatination
 select age,
 reverse(
    concat(
		replace(first_name, 'a', '143'), 1,4
	))as updated_name from people;

SELECT
    SUBSTRING(REPLACE(title, 'e', '3'), 1, 10) AS 'weird string'
FROM books;

-- DISTINCT Statement - Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.
					-- So, if a value is present twice it returns only once.
select distinct author_lname from books;

-- ORDER BY -  The ORDER BY keyword is used to sort the result-set in ascending or descending order.
			-- The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
            -- Its Alpha numeric sorting.
select title from books order by title;
select title, author_lname, released_year from books order by released_year;
select title, author_lname, released_year from books order by 2; -- here 2 referes to 'author_lname'
select author_lname, title from books order by title desc;

-- LIMIT - MySQL provides a LIMIT clause that is used to specify the number of records to return.
select * from books limit 5; -- Return 5 items from the table
select * from books limit 3, 5; -- here 3 is the start index of the row and 5 is number elements to return from index 3;
								-- In my SQL 1st row index of the table is 0

-- LIKE - The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
		-- There are two wildcards often used in conjunction with the LIKE operator:
				-- % - The percent sign represents zero, one, or multiple characters
				-- _ - The underscore represents a single character
select * from books;
select book_id, author_lname from books where author_lname like 'lahiri'; -- If are sure about the string we can use directly
select book_id, author_lname from books where author_lname like '%ah%'; -- If you arent pretty sure of string, search with partial characters
select book_id, author_lname from books where author_lname like '_ah%';
select book_id, author_lname from books where author_lname like '____ri%'; -- here each '_' represents one character
select book_id, author_lname from books where author_lname like '_a_i_i'; -- random characters match is also possible
	-- Now hoe do we select % or _ from a text
select title from books where title like '%\%%'; -- here '\' is an escape character
select title from books where title like '%\_%'; -- here '\' is an escape character

-- COUNT - The COUNT() function returns the number of records returned by a select query.
SELECT COUNT(*) FROM books;
select count(author_lname) from books;
select count(distinct author_lname) from books;
SELECT COUNT(DISTINCT author_lname, author_fname) FROM books; -- This returns distinct elements for both columns

-- GROUP_BY - The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".
			-- The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.
select title, released_year from books group by released_year;
select title, released_year,count(released_year) from books group by released_year;
select title, released_year,count(released_year) from books group by released_year, author_lname; -- Return more unique data
select concat('In', released_year,count(*),' ','books are released') from books group by released_year;
SELECT CONCAT('In ', released_year, ' ', COUNT(released_year), ' book(s) released') AS year FROM books GROUP BY released_year;
select COUNT(*)  from books;
show columns from books;

-- MIN and MAX
select * from books;
select min(released_year) from books;
select title, min(released_year) from books;
select max(released_year) from books;
select title, author_fname from books where pages=(
	select min(pages) from books
); -- SUB Queries
select author_fname, min(released_year) from books group by author_fname;
select max(pages), author_fname from books group by author_fname;

-- SUM
select * from books;
select sum(pages) from books;
select author_fname, sum(pages) from books group by author_fname;

-- AVG
select avg(pages) from books;
select author_fname, avg(stock_quantity) from books group by released_year;

-- DATA TYPES

    -- FLOAT,
CREATE TABLE thingies (price FLOAT);
INSERT INTO thingies(price) VALUES (88.45);
SELECT * FROM thingies;
    -- DOUBLE,

    -- DECIMAL - The first argument is precision, which is the number of total digits.
			   -- The second argument is scale which is the maximum number of digits to the right of the decimal point.
create table decimaltyp2(
    salary3 decimal(5,2)
);
insert into datatype(salary3) values('123.1');
select * from decimaltyp2;

	-- Date & Time
create table birthdays(
	name varchar(100),
    birthdate date,
    birthtime time,
    birthdt	datetime
);
select * from birthdays;
insert into birthdays(name, birthdate, birthtime, birthdt)
			   values('shyam', '1995-10-10','10:12:19','1995-10-10 10:12:19');
insert into birthdays(name, birthdate, birthtime, birthdt)
			   values('ram', current_date(), current_time(), now());
select name, dayname(birthdate) from birthdays; -- Find day name of birthdate
select birthdate, dayofmonth(birthdate) from birthdays;
select birthdate, dayofweek(birthdate) from birthdays; -- To find which day from the week. Ex : sunday - 1, monday - 2
select birthdate, dayofyear(birthdate) from birthdays;
select birthdate, week(birthdate) from birthdays; -- Extract number of week for selected column
select birthdate, year(birthdate) from birthdays; -- Extract year for selected column
select birthdt, minute(birthdt) from birthdays; -- Extract Minute from column
select birthdt, hour(birthdt) from birthdays; -- Extract hour from column
select birthdt, second(birthdt) from birthdays; -- Extract seconds from column
	-- DATE FORMATER - DIfferent more formatter are available in sql site
select name, birthdt, date_format(birthdt,'%D %M %Y') from birthdays; -- Format the date in which ever format we like
select name,birthdt, date_format(birthdt,'%H : %i : %S : %p') from birthdays; -- Grabbing time from column
	-- DATE MATH - We can add Months, years, Time anything to the data. More infor provided in MYSQL site under date and time functions
select datediff('1995-10-10 10:12:19', '1995-10-02'); -- Returns difference between dates
select datediff(now(), birthdt) from birthdays;
select birthdt, date_add(birthdt, interval 1 month) from birthdays;-- Adds one month to the date in table using INTERVAL KEYWORD
select birthdt, birthdt + interval 1 month from birthdays; -- This also works same as above
select birthdt, date_sub(birthdt, interval 1 month) from birthdays;
select birthdt, date_add( date_add(birthdt, interval 1 month ), interval 10 hour) from birthdays; -- Adding date and time to the data
select birthdt, birthdt + interval 1 month + interval 10 hour from birthdays;

	-- TIMESTAMPS
create table comments(
	content varchar(255),
    created_at timestamp default now()
);
insert into comments(content) values('shyam was very funny!!');
select * from comments;
create table comments2(
	content varchar(255),
    created_at timestamp default now() on update now() -- This means when ever there is an update on content it updates the current timestamp
);
insert into comments2(content) values('praveen was very funny!!');
select * from comments2;
update comments2 set content =  'Ram is terrible!!' where content = 'praveen was very funny!!';-- Updated the data with latest timestamp

-- Logical Operators
	-- NOT EQUAL TO OPERATOR - works opposite to EQUALS OPERATOR
select title, author_fname from books where author_fname != 'Dave'; -- Returns all the columns which are not equal to 'Dave'
	-- NOT LIKE OPERATOR - works opposite to LIKE OPERATOR
select title, author_fname from books where author_fname not like '%av%'; -- Returns all the columns which are not like 'av'
	-- GREATER THAN OPERATOR
select title, released_year from books where released_year > 2000;
	-- GREATER THAN OR EQUAL OPERATOR
select title, released_year from books where released_year >=  2013;
select title, released_year from books where length(title) >=  25;
	-- Exercise on Greater than
select 100>5; -- Returns 1, which means true
select -15>15; -- Returns 0, which means false
select 1<1; -- Returns 0, which means false
select 1>1; -- Returns 0, which means false
select 'a'<'b';
select 'a'<'A'; -- Returns 0, which means false.In my sql string comparisions are not case sensitive
select 'a'<='A'; -- Returns 1, which means both are same

	-- AND OPERATOR (&& or AND)
select author_fname, released_year from books where author_fname = 'Dave' &&  released_year = 2012;
select author_fname, released_year from books where author_fname = 'Dave' AND  released_year = 2012;
	-- OR OPERATOR (|| or OR)
select author_fname, released_year from books where author_fname = 'Dave' ||  released_year = 2012;
select author_fname, released_year from books where author_fname = 'Dave' OR  released_year = 2012;
	-- BETWEEN and NOT BETWEEN OPERATOR
select title, released_year from books where released_year between 2005 and 2010;
select title, released_year from books where released_year >= 2005 &&  released_year <=2010; -- Works same as above
select title, released_year from books where released_year not between 2005 and 2010;
	-- IN OPERATOR
select author_fname, released_year from books where author_fname in ('Dave','neil'); -- Helps in finding multiple rows from same column
	-- NOT IN OPERATOR
select author_fname, released_year from books where author_fname not in ('Dave','neil');

-- ONE TO MANY RELATIONSHIP
create table customers(
	id int auto_increment,
    first_name varchar(100) not null,
    last_name varchar(100) not null,
    email varchar(150) not null,
    primary key(id)
);
Create table orders(
	id int auto_increment primary key,
    order_date date,
    amount decimal(8,2),
    customer_id int,
	foreign key(customer_id) references customers(id)
);
INSERT INTO customers (first_name, last_name, email)
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');

INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016/02/10', 99.99, 1),
       ('2017/11/11', 35.50, 1),
       ('2014/12/12', 800.67, 2),
       ('2015/01/03', 12.50, 2),
       ('1999/04/11', 450.25, 5);
select * from customers;
select * from orders;
insert into orders (order_date, amount, customer_id) values('2016/02/10', 99.99, 34); -- Throws an error because id 34 is not present in reference table
-- CROSS JOIN
select * from customers, orders;
-- INNER JOIN - Returns records that have matching values in both tables
	-- IMPLICIT INNER JOIN
select * from customers, orders where customers.id = orders.customer_id;
select customers.id, first_name, order_date, customer_id from customers, orders where customers.id = orders.customer_id;
	-- EXPLICIT INNER JOIN
select customers.id, first_name, order_date, customer_id from customers join orders on customers.id = orders.customer_id;
-- LEFT JOIN - The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.
			 -- In some databases LEFT JOIN is called LEFT OUTER JOIN
select * from orders left join customers on customers.id = orders.customer_id;
select * from customers left join orders on customers.id = orders.customer_id;
-- RIGHT JOIN - The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match.
			  --  In some databases RIGHT JOIN is called RIGHT OUTER JOIN.
select * from orders right join customers on customers.id = orders.customer_id;
select * from customers right join orders on customers.id = orders.customer_id;

-- MANY TO MANY RELATIONSHIP
create table series(
	id int auto_increment primary key,
    title varchar(255),
    released_year year(4),
    genre varchar(100)
);

create table reviews(
	id int auto_increment primary key,
    rating decimal(2,1),
    series_id int,
    foreign key(series_id) references series(id),
    reviewer_id int,
    foreign key(reviewer_id) references reviewers(id)
);

create table reviewers(
	id int auto_increment primary key,
    first_name varchar(100),
    last_name varchar(100)
);

INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');


INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');


INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);

select * from  reviewers ;
select title, rating from series join reviews on series.id = reviews.series_id;
select title, avg(reviews.rating) from series join reviews on series.id = reviews.series_id group by series.id; -- Joins both series &reviews tables to find average rating of each series
select first_name, last_name, rating from reviewers join reviews on reviews.reviewer_id = reviewers.id;
select title as 'no review done' from series left join reviews on reviews.series_id = series.id where rating is null; -- select series which are not reviewed by anyone
select first_name, last_name, count(reviewer_id), min(rating),max(rating),round( avg(rating), 2),if(count(rating) >= 1, 'ACTIVE', 'INACTIVE') as status from reviewers left join reviews on reviews.reviewer_id = reviewers.id group by reviews.reviewer_id; -- Using if clause - Finding count,min rating, max raating, avg rating, status
select first_name, last_name, count(reviewer_id), min(rating),max(rating),round( avg(rating), 2),case when count(rating) >=1 then 'ACTIVE' else 'INCTIVE' end as STATUS from reviewers left join reviews on reviews.reviewer_id = reviewers.id group by reviews.reviewer_id; -- Using CASE statement
select title, rating, concat( first_name,' ', last_name) from reviewers
	inner join reviews on reviewers.id = reviews.reviewer_id
	inner join series on series.id = reviews.series_id order by title; -- Joining 3 tables to collect the data

-- ON DELETE CASCADE
CREATE TABLE customers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id)
        REFERENCES customers(id)
        ON DELETE CASCADE -- In case if ou want to delete any customer from customers table it automatically deletes the records in orders table.
);
-- ON UPDATE CASCADE

-- CASE STATEMENT
select
	case
		when email like '%yahoo%' then 'yahoo'
        when email like '%gmail%' then 'gmail'
        else 'others'
		end as provider, count(*)
from users1 group by provider;
------------------------------------------------------
